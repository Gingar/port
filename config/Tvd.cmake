SET (CONFIG_PATH $ENV{DEPOT}/config)
LIST(APPEND CMAKE_MODULE_PATH ${CONFIG_PATH})
INCLUDE(Utils)
INCLUDE(SetupGlobal)

# Setup user config
SET(SETUP_USER $ENV{USER_CONFIG_FILE})
IF(NOT SETUP_USER)
	SET(SETUP_USER SetupUser)
ENDIF(NOT SETUP_USER)
MESSAGE( STATUS "USER CONFIG FILE: ${SETUP_USER}" )
INCLUDE(${SETUP_USER})

SET(CMAKE_FIND_ROOT_PATH $ENV{DESTDIR}${CMAKE_INSTALL_PREFIX} ${PLATFORM_FIND_ROOT_PATH})
INCLUDE_IF_EXIST($ENV{DEPOT}/config/SetupUser_${PLATFORM}.cmake)

MACRO (Pre_Build)

	LIST(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR})

	INCLUDE(sources)
	INCLUDE_IF_EXIST(${PROJECT_SOURCE_DIR}/sources_${PLATFORM}.cmake)

	IF(COMPILE_TESTS)
		INCLUDE_IF_EXIST(${PROJECT_SOURCE_DIR}/sources.test.cmake)
		set(COMPILE_TESTS ${FILE_INCLUDED})
	ENDIF()

	parse_arguments(PRE_BUILD
		"PROJECT_NAME;PROJECT_DESCRIPTION;PROJECT_VERSION;DEPENDENCIES;TEST_DEPENDENCIES;BIN_DESTINATION"
		""
		${ARGN}
	)

	INCLUDE(Platform_${PLATFORM})
	INCLUDE_IF_EXIST(${PROJECT_SOURCE_DIR}/platform_${PLATFORM}.cmake)
	SET(PRE_BUILD_DEPENDENCIES ${PRE_BUILD_DEPENDENCIES} ${${PLATFORM}_LIBRARIES})

	PROJECT(${PRE_BUILD_PROJECT_NAME})

	STRING(TOUPPER ${PROJECT_NAME} PROJECT_NAME_UPPERCASE )

	SET(VERSION ${PRE_BUILD_PROJECT_VERSION})

	# set to 0 when not a release candidate, non zero means that any generated 
	# svn tags will be treated as release candidates of given number
	SET(PROJECT_RELEASE_CANDIDATE 0)

	IF(NOT DEFINED BUILD_SHARED_${PROJECT_NAME_UPPERCASE})
		OPTION_IF_EMPTY(BUILD_SHARED "Build the library shared." OFF)		
	ELSE(NOT DEFINED BUILD_SHARED_${PROJECT_NAME_UPPERCASE})
		SET(BUILD_SHARED ${BUILD_SHARED_${PROJECT_NAME_UPPERCASE}})
	ENDIF(NOT DEFINED BUILD_SHARED_${PROJECT_NAME_UPPERCASE})	

	# display status message for important variables
	MESSAGE( STATUS )
	MESSAGE( STATUS "-------------------------------------------------------------------------------" )
	MESSAGE( STATUS "PROJECT_NAME = ${PROJECT_NAME}" )
	MESSAGE( STATUS "PROJECT_DESCRIPTION = ${PRE_BUILD_PROJECT_DESCRIPTION}" )
	MESSAGE( STATUS "PROJECT_VERSION = ${PRE_BUILD_PROJECT_VERSION}" )
	MESSAGE( STATUS "PLATFORM = ${PLATFORM}" )
	MESSAGE( STATUS "PLATFORM_FILE = ${CMAKE_TOOLCHAIN_FILE}" )
	MESSAGE( STATUS )
	MESSAGE( STATUS "BUILD_SHARED_${PROJECT_NAME_UPPERCASE}=${BUILD_SHARED_${PROJECT_NAME_UPPERCASE}}")
	MESSAGE( STATUS "BUILD_SHARED = ${BUILD_SHARED}" )
	MESSAGE( STATUS "CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}" )
	MESSAGE( STATUS "CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}" )
	MESSAGE( STATUS "CMAKE_MODULE_PATH = ${CMAKE_MODULE_PATH}" )
	MESSAGE( STATUS "CMAKE_FIND_ROOT_PATH = ${CMAKE_FIND_ROOT_PATH}" )
	MESSAGE( STATUS "PROJECT_DEPENDS = \"${PROJECT_DEPENDS}\"" )
	MESSAGE( STATUS "BUILD_WITH = \"${BUILD_WITH}\"" )
	MESSAGE( STATUS "INSTALL_DOC = ${INSTALL_DOC}" )
	MESSAGE( STATUS "Change a value with: cmake -D<Variable>=<Value>" )
	MESSAGE( STATUS "-------------------------------------------------------------------------------" )
IF(NOT SILENT)
	MESSAGE( STATUS "HEADER FILES = ${${PROJECT_NAME_UPPERCASE}_HEADER_FILES}" )
	MESSAGE( STATUS "SOURCE FILES = ${${PROJECT_NAME_UPPERCASE}_SOURCE_FILES}" )
	MESSAGE( STATUS "DEPENDENCIES = ${PRE_BUILD_DEPENDENCIES}")
	IF(RUN_TESTS)
		MESSAGE( STATUS "TEST HEADER FILES = ${${PROJECT_NAME_UPPERCASE}_TEST_HEADER_FILES}" )
		MESSAGE( STATUS "TEST SOURCE FILES = ${${PROJECT_NAME_UPPERCASE}_TEST_SOURCE_FILES}" )
		MESSAGE( STATUS "TEST DEPENDENCIES = ${PRE_BUILD_TEST_DEPENDENCIES}")
	ENDIF(RUN_TESTS)
	MESSAGE( STATUS "-------------------------------------------------------------------------------" )
ENDIF(NOT SILENT)
	
	CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/config.h.cin
	  ${CMAKE_BINARY_DIR}/generated/config.h
	)

	FOREACH(DEPENDENT ${PRE_BUILD_DEPENDENCIES} )
		INCLUDE_DIRECTORIES( ${${DEPENDENT}_INCLUDE_DIRS} )
		INCLUDE_DIRECTORIES( ${${DEPENDENT}_INCLUDE_DIR} )
		LINK_DIRECTORIES( ${${DEPENDENT}_LIBRARY_DIRS} )
		LIST(APPEND ${PROJECT_NAME_UPPERCASE}_BUILD_LIBRARIES ${${DEPENDENT}_LIBRARIES} )
	ENDFOREACH(DEPENDENT )
	LIST(APPEND ${PROJECT_NAME_UPPERCASE}_BUILD_LIBRARIES ${${PROJECT_NAME_UPPERCASE}_LINK_LIBRARIES} )

	IF(COMPILE_TESTS)
		find_package(GTest REQUIRED)
		LIST(APPEND ${PROJECT_NAME_UPPERCASE}_TEST_LINK_LIBRARIES gtest)
		FOREACH(DEPENDENT ${PRE_BUILD_TEST_DEPENDENCIES} )
			INCLUDE_DIRECTORIES( ${${DEPENDENT}_INCLUDE_DIRS} )
			INCLUDE_DIRECTORIES( ${${DEPENDENT}_INCLUDE_DIR} )
			LINK_DIRECTORIES( ${${DEPENDENT}_LIBRARY_DIRS} )
			LIST(APPEND ${PROJECT_NAME_UPPERCASE}_TEST_BUILD_LIBRARIES ${${DEPENDENT}_LIBRARIES} )
		ENDFOREACH(DEPENDENT )
		LIST(APPEND ${PROJECT_NAME_UPPERCASE}_TEST_BUILD_LIBRARIES ${${PROJECT_NAME_UPPERCASE}_TEST_LINK_LIBRARIES} )
	ENDIF(COMPILE_TESTS)
	INCLUDE_DIRECTORIES( ${CMAKE_BINARY_DIR} )

	get_directory_property( ${PROJECT_NAME_UPPERCASE}_INCLUDE_DIRECTORIES INCLUDE_DIRECTORIES )
	get_directory_property( ${PROJECT_NAME_UPPERCASE}_LINK_DIRECTORIES LINK_DIRECTORIES )

	get_directory_property( ${PROJECT_NAME_UPPERCASE}_TEST_INCLUDE_DIRECTORIES INCLUDE_DIRECTORIES )
	get_directory_property( ${PROJECT_NAME_UPPERCASE}_TEST_LINK_DIRECTORIES LINK_DIRECTORIES )
	
	MESSAGE( STATUS "${PROJECT_NAME_UPPERCASE}_INCLUDE_DIRECTORIES = ${${PROJECT_NAME_UPPERCASE}_INCLUDE_DIRECTORIES}" )
	MESSAGE( STATUS "${PROJECT_NAME_UPPERCASE}_LINK_DIRECTORIES = ${${PROJECT_NAME_UPPERCASE}_LINK_DIRECTORIES}" )
	MESSAGE( STATUS "${PROJECT_NAME_UPPERCASE}_LINK_LIBRARIES = ${${PROJECT_NAME_UPPERCASE}_BUILD_LIBRARIES}")
	IF(COMPILE_TESTS)
		MESSAGE( STATUS "${PROJECT_NAME_UPPERCASE}_TEST_INCLUDE_DIRECTORIES = ${${PROJECT_NAME_UPPERCASE}_TEST_INCLUDE_DIRECTORIES}" )
		MESSAGE( STATUS "${PROJECT_NAME_UPPERCASE}_TEST_LINK_DIRECTORIES = ${${PROJECT_NAME_UPPERCASE}_TEST_LINK_DIRECTORIES}" )
		MESSAGE( STATUS "${PROJECT_NAME_UPPERCASE}_TEST_LINK_LIBRARIES = ${${PROJECT_NAME_UPPERCASE}_TEST_LINK_LIBRARIES}")
	ENDIF(COMPILE_TESTS)
	MESSAGE( STATUS "-------------------------------------------------------------------------------" )

	IF(BUILD_SHARED)
        	SET(LIBRARY_TYPE SHARED)
	ELSE(BUILD_SHARED)
	        SET(LIBRARY_TYPE STATIC)
	ENDIF(BUILD_SHARED)

ENDMACRO (Pre_Build)

MACRO (Add_Lib)
	Pre_Build( ${ARGN} )
	ADD_LIBRARY( ${PROJECT_NAME} ${LIBRARY_TYPE} ${${PROJECT_NAME_UPPERCASE}_SOURCE_FILES})
	# Link the executable to the libraries.
	TARGET_LINK_LIBRARIES( ${PROJECT_NAME}
		${${PROJECT_NAME_UPPERCASE}_BUILD_LIBRARIES}
	)
	IF(COMPILE_TESTS)
		ADD_EXECUTABLE(${PROJECT_NAME}test ${${PROJECT_NAME_UPPERCASE}_TEST_SOURCE_FILES})
		# Link the executable to the libraries.
		TARGET_LINK_LIBRARIES(${PROJECT_NAME}test ${PROJECT_NAME}
			${${PROJECT_NAME_UPPERCASE}_TEST_BUILD_LIBRARIES}
		)
		IF(RUN_TESTS AND EXISTS ${PROJECT_SOURCE_DIR}/test/test.sh)
			#CTEST
			MESSAGE( STATUS "Test will run before install." )
			ENABLE_TESTING()
			ADD_TEST(${PROJECT_NAME} ${PROJECT_SOURCE_DIR}/test/test.sh ${CMAKE_BINARY_DIR}/${PROJECT_NAME}test ${PROJECT_SOURCE_DIR})
		ENDIF(RUN_TESTS AND EXISTS ${PROJECT_SOURCE_DIR}/test/test.sh)
	ENDIF(COMPILE_TESTS)

	INSTALL_HEADERS_WITH_DIRECTORY( include/lifia/${PRE_BUILD_PROJECT_NAME} "src/|include/" ${PROJECT_NAME_UPPERCASE}_HEADER_FILES )

	IF(${CMAKE_BUILD_TYPE} STREQUAL "Release" AND BUILD_SHARED)
		ADD_CUSTOM_COMMAND( TARGET ${PROJECT_NAME}
							POST_BUILD
							COMMAND  ${STRIP_TOOL} ${CMAKE_BINARY_DIR}/lib${LIB_PREFIX}${PROJECT_NAME}.so)
	ENDIF()

	# install library
	set_target_properties(${PROJECT_NAME} PROPERTIES PREFIX lib${LIB_PREFIX})
	INSTALL( TARGETS ${PROJECT_NAME} DESTINATION lib/lifia PERMISSIONS
		OWNER_READ OWNER_WRITE OWNER_EXECUTE
		GROUP_READ GROUP_EXECUTE
		WORLD_READ WORLD_EXECUTE )

ENDMACRO (Add_Lib)


MACRO (Add_Bin)
	Pre_Build( ${ARGN} )
	ADD_EXECUTABLE(${PROJECT_NAME} ${${PROJECT_NAME_UPPERCASE}_SOURCE_FILES})
	# Link the executable to the libraries.
	TARGET_LINK_LIBRARIES( ${PROJECT_NAME}
		${${PROJECT_NAME_UPPERCASE}_BUILD_LIBRARIES}
	)

	#strip binary
	IF(${CMAKE_BUILD_TYPE} STREQUAL "Release")
		ADD_CUSTOM_COMMAND( TARGET ${PROJECT_NAME}
							POST_BUILD
							COMMAND  ${STRIP_TOOL} ${PROJECT_NAME})
	ENDIF()

	# install binary
	INSTALL( TARGETS ${PROJECT_NAME} DESTINATION ${PRE_BUILD_BIN_DESTINATION} PERMISSIONS
	        OWNER_READ OWNER_WRITE OWNER_EXECUTE
	        GROUP_READ GROUP_EXECUTE
	        WORLD_READ WORLD_EXECUTE )

ENDMACRO (Add_Bin)

