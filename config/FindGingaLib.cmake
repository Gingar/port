# - Find Ginga Lib
# Find native ginga includes and library
# This module defines
#  GINGALIB-${COMPONENT}_INCLUDE_DIRS, where to find the ginga component header files.
#  GINGALIB-${COMPONENT}_LIBRARIES, the libraries needed to use the ginga component.
#  GINGALIB-${COMPONENT}_FOUND, If false, do not try to use the ginga component library.
# also defined, but not for general use are
#  GINGALIB-${COMPONENT}_LIBRARY, where to find the ginga component library.

IF( GingaLib_FIND_COMPONENTS )

	FOREACH(COMPONENT ${GingaLib_FIND_COMPONENTS})
		STRING(TOUPPER ${COMPONENT} COMPONENT_UPPERCASE)


		FIND_PATH(GINGALIB-${COMPONENT_UPPERCASE}_INCLUDE_DIRS ${COMPONENT} PATH_SUFFIXES lifia)

		LIST(APPEND GINGALIB-${COMPONENT_UPPERCASE}_NAMES  ${LIB_PREFIX}${COMPONENT} )
		FIND_LIBRARY(GINGALIB-${COMPONENT_UPPERCASE}_LIBRARY NAMES ${GINGALIB-${COMPONENT_UPPERCASE}_NAMES} PATH_SUFFIXES lifia )

		# handle the QUIETLY and REQUIRED arguments and set GINGALIB-${COMPONENT_UPPERCASE}_FOUND to TRUE if 
		# all listed variables are TRUE
		INCLUDE(FindPackageHandleStandardArgs)
		set(GINGALIB-${COMPONENT_UPPERCASE}_FIND_REQUIRED ${GingaLib_FIND_REQUIRED} )
		FIND_PACKAGE_HANDLE_STANDARD_ARGS(GINGALIB-${COMPONENT_UPPERCASE} DEFAULT_MSG GINGALIB-${COMPONENT_UPPERCASE}_LIBRARY GINGALIB-${COMPONENT_UPPERCASE}_INCLUDE_DIRS)

		IF(GINGALIB-${COMPONENT_UPPERCASE}_FOUND)
			SET(GINGALIB-${COMPONENT_UPPERCASE}_LIBRARIES ${GINGALIB-${COMPONENT_UPPERCASE}_LIBRARY})
		ENDIF(GINGALIB-${COMPONENT_UPPERCASE}_FOUND)

		MARK_AS_ADVANCED(GINGALIB-${COMPONENT_UPPERCASE}_LIBRARY GINGALIB-${COMPONENT_UPPERCASE}_INCLUDE_DIRS )

	ENDFOREACH( COMPONENT )
ENDIF( GingaLib_FIND_COMPONENTS )
